<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:composite="http://java.sun.com/jsf/composite">
<!-- JSF Component for javascript invoking function for Cliente @Firma "Multifirma Masica".
Copyright (C) 2013  Jorge Ortega Traverso

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Contact Information: http://saiyandev.com
--><composite:interface componentType="clienteAFirmaComponent" name="cliente331-mfm"
	displayName="Funcion de multifirma masiva con Cliente @firma 3.3.1"
	shortDescription="Configura una función javascript para firmar con el cliente de firma electrónica @firma 3.3.1" >

<!-- Parámetros de configuracion de la firma -->
	<composite:attribute name="signFormat" default="CMS/PKCS#7"
		required="false"
		shortDescription="Formato de firma, por defecto CMS/PKCS#7 [CMS/PKCS#7 | CAdES | XAdES Detached | XAdES Enveloped | XAdES Enveloping | XMLDSig Detached | XMLDSig Enveloped | XMLDSig Enveloping | PAdES | ODF | OOXML]" />
	<composite:attribute name="encryptAlg" default="SHA1withRSA"
		required="false"
		shortDescription="Algoritmo de encriptación, por defecto SHA1withRSA [SHA1withRSA | MD5withRSA | MD2withRSA]" />
	<composite:attribute name="signMode" default="explicit"
		required="false"
		shortDescription="Establece el formato de la firma, por defecto explicit [explicit | implicit]. Solo determinados formatos de firma admiten esta configuración: CMS/PKCS#7, CAdES, XAdES Detached, XAdES Enveloped, XMLDSig Detached, XMLDSig Enveloped " />
	<composite:attribute name="originalFormat" default="true"
		required="false"
		shortDescription="Indica si se debe respetar el formato de firma original para las operaciones de multifirma masiva, por defecto true [true | false]." />
	<composite:attribute name="massiveOperation" default="FIRMAR"
		required="false"
		shortDescription="Establece la operación masiva a realizar, por defecto FIRMAR [FIRMAR | COFIRMAR | CONTRAFIRMAR_ARBOL | CONTRAFIRMAR_HOJAS]" />
	<composite:attribute name="returnOriginalData" default="false"
		required="false"
		shortDescription="Hace que se devuelvan o no los datos originales en el resultado de la operacion de firma, por defecto false [true | false]" />

<!-- Propiedades generales del componente -->
	<composite:attribute name="load" required="false" default="true" shortDescription="Hace las funciones de 'rendered'" />
	<composite:attribute name="okMessage" default="Firma realizada correctamente" required="false" shortDescription="Mensaje que se mostrará cuando la firma se realice correctamente" />
	<composite:attribute name="failMessage" default="No se ha completado la firma" required="false" shortDescription="Mensaje que se mostrará cuando haya algun problema al firmar" />
	<composite:attribute name="functionName" default="firmaConApplet" required="false" shortDescription="Nombre de la función javascript que realizará la firma" />
</composite:interface>
<composite:implementation>
<h:panelGroup id="funcionFirmaScript3_3_1" layout="span" rendered="#{cc.attrs.load}" >
		<script type="text/javascript">&lt;!--
		/**
		 * jsonData: Objeto JSON con los datos a firmar
		 *		var jsonData = {[
		 *						{"id" : "1", "typeData" : "hash", "datosB64": "AHKSDHKKH..."},
		 *         				{"id" : "2", "typeData" : "hash", "datosB64": "AHKSDHKKH..."}, ...
		 *						]};
		 * okMessage: Mensaje que se muestra al realizar la firma correctamente.
		 * failMessge: Mensaje que se muestra al no realizarse la firma correctamente.
		 * Return: Devuelve una estructura JSON con los datos de la operación
		 *		var massiveResult = {
		 *			"certificadoB64" :"",
		 *			"signatureAlg" : "#{cc.attrs.encryptAlg}",
		 *			"signatureFormat" : "#{cc.attrs.signFormat}",
		 *			"signatureMode" : "#{cc.attrs.signMode}",
		 *			"originalFormat" : "#{cc.attrs.originalFormat}",
		 *			"massiveOperation" : "#{cc.attrs.massiveOperation}",
		 *			"firmas" : [
		 *				{ "id" : "1",
		 *				  "typeData" : "",
		 *				  "datos64": "",
		 *				  "firmaB64" : "" },
		 *				{ "id" : "2",
		 *				  "typeData" : "",
		 *				  "datos64": "",
		 *				  "firmaB64" : "" },...
		 *				]
		 *		};
		 *
		 */
		function #{cc.attrs.functionName}(jsonData, okMessage, failMessage) {
			// Comprobamos que se haya introducido al menos un fichero
			var filesList = document.getElementById('#{cc.attrs.data}');
			if(jsonData == undefined || jsonData == null) {
				alert("No se han indicado datos sobre los que realizar la operaci\u00F3n.");
				return;
			}
			var massiveResult = {
					"certificadoB64" :"",
					"signatureAlg" : "#{cc.attrs.encryptAlg}",
					"signatureFormat" : "#{cc.attrs.signFormat}",
					"signatureMode" : "#{cc.attrs.signMode}",
					"originalFormat" : "#{cc.attrs.originalFormat}",
					"massiveOperation" : "#{cc.attrs.massiveOperation}",
					"firmas" : new Array() /*[{
						"id" : "",
						"typeData" : "",
						"datos64": "",
						"firmasB64" : "",
						}]*/
			};

			// Limpiamos la configuracion del cliente
			initialize();
			// Configuramos los datos de la operacion
			configuraFirma();
			clienteFirma.setSignatureAlgorithm('#{cc.attrs.encryptAlg}');
			clienteFirma.setSignatureFormat('#{cc.attrs.signFormat}');
			clienteFirma.setSignatureMode('#{cc.attrs.signMode}');
			clienteFirma.setOriginalFormat('#{cc.attrs.originalFormat}');
			clienteFirma.setMassiveOperation('#{cc.attrs.massiveOperation}');

			// Iniciamos la operacion masiva
			clienteFirma.initMassiveSignature();
			
			for(var i=0; i &lt; jsonData.length; i++) {
				var data = jsonData[i];
				massiveResult.firmas[i] = {
						"id" : data.id,
						"typeData" : data.typeData,
						"datosB64" : #{cc.attrs.returnOriginalData} ? data.datosB64 : "",
						"firmaB64" : ""
				};
				var result;
				if(data.typeData == 'data') {
					result = clienteFirma.massiveSignatureData(data.datosB64);
				} else if(data.typeData == 'file') {
					result = clienteFirma.massiveSignatureFile(data.datosB64);
				} else if(data.typeData == 'hash') {
					result = clienteFirma.massiveSignatureHash(data.datosB64);
				}
				massiveResult.firmas[i].firmaB64 = result;
			}
			massiveResult.certificadoB64 = clienteFirma.getSignCertificateBase64Encoded();
			// Finalizamos la operacion masiva
			clienteFirma.endMassiveSignature();
			return massiveResult;
		}
	--></script>
</h:panelGroup>
</composite:implementation>
</html>
